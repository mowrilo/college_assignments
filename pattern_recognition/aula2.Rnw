\documentclass{article}

\usepackage[latin1]{inputenc}
\usepackage[brazil]{babel}
\usepackage[utf8]{inputenc}

\title{Aulas de Reconhecimento de Padr?es}

\begin{document}
\SweaveOpts{concordance=TRUE}

\maketitle
% \tableofcontents
\author{Murilo}
\section{Aula 2 - 17/08/2016}

Aula inicial de reconhecimento de padrões.

Modelos generativos e discriminativos.

<<echo=TRUE,fig=TRUE>>=
rm(list=ls())
x<-seq(0,2*pi,0.1*pi)
y<-sin(x)
plot(x,y,type='l') # tipo l: continuo, tipo s: degrau

# para plotar por cima:
par(new=TRUE)  # segura a figura acima e plota por cima
plot(x,y,type = 'p', col='red') # tipo p: ponto
@

% nao pode mais de 1 plot por chunk:
<<echo=TRUE,fig=TRUE>>=
plot(y,x,type='l')
@
\pagebreak
<<echo=TRUE, fig=TRUE>>=
rm(list=ls())
x<-seq(-50,50,0.01)
y<-sin(x)/x
plot(x,y,type='l')
@
\pagebreak


\subsection{Distribui??es normais univariadas}
\label{seqdnormaluniv}
Um exemplo de generativo é o seguinte, mostrado na Figura \ref{figclassificador}:

\begin{figure}[h]
<<echo=F,fig=TRUE>>=
rm(list=ls())
xc1<-rnorm(50)*0.5+4 # +2 ou +4 para separ?-los, 0.5 para diminuir a vari?ncia
xc2<-rnorm(50)*0.5+2
plot(xc1,matrix(0,nrow=50),type='p',col='red',xlim=c(0,6),xlab='',ylim=c(0,1),ylab='') # matrix ou numeric(20)
#hist(xc1) # gera histograma
par(new=T)
plot(xc2,matrix(0,nrow=50),type='p',col='green',xlim=c(0,6),xlab='xc1,xc2',ylim=c(0,1),ylab='') #xlim deixa tudo na mesma escala

# encontrando o limiar:
teta<-3

#para encontrar o degrau
xrange<-seq(0,6,0.01) #passo pequeno para avaliar
yrange<-1*(xrange>teta) #multiplica por 1 para transformar de bool pra int

par(new=T)
plot(xrange,yrange,type='l',col='black',xlim=c(0,6),xlab='xc1,xc2',ylim=c(0,1),ylab='classifica??o')
med1 <- mean(xc1)
med2 <- mean(xc2)
dp1 <- sd(xc1)
dp2 <- sd(xc2)
# f?rmula da fun??o normal:
fnormal1var<-function(x,m,r) ((1/(sqrt(2*pi*r*r)))*exp(-0.5 * ((x-m)/(2*r))^2))
# f1 e f2 s?o as estimativas das fun??es que geraram os pontos!
f1<-fnormal1var(xrange,med1,dp1)
f2<-fnormal1var(xrange,med2,dp2)
par(new=T)
plot(xrange,f1,type='l',col='red',xlim=c(0,6),xlab='',ylim=c(0,1),ylab='')
par(new=T)
plot(xrange,f2,type='l',col='green',xlim=c(0,6),xlab='',ylim=c(0,1),ylab='')

yrange2<-1*(f1>f2) #classificando de acordo com as fun??es
par(new=T)
plot(xrange,yrange2,type='l',col='blue',xlim=c(0,6),xlab='xc1,xc2',ylim=c(0,1),ylab='classifica??o')
@
\caption{Figura do classificador}
\label{figclassificador}
\end{figure}

No modelo generativo:
1- Primeiramente, estima-se as densidades. Calcula-se média e desvio padrão.\cite{ballard1981generalizing}

\section{Aula 3}

\begin{figure}[h]
<<echo=F,fig=T>>=
rm(list=ls())
# library('plot3D') nao tem a biblioteca

seqx<-seq(-25,25,0.1)
seqy<-seq(-25,25,0.1)
M<-matrix(nrow = length(seqx),ncol = length(seqy))
i<-0
for (x in seqx)
{
  i<-i+1
  j<-0
  for (y in seqy)
  {
    j<-j+1
    M[i,j]<-x^3+y^3+6*x*y
  }
}
persp(seqx,seqy,M,col='yellow')
@
\caption{Figura gerada por função de duas variaveis}
\label{figf2v}
\end{figure}

<<echo=T,fig=T>>=
rm(list = ls())
xc1 <- matrix(rnorm(20000), ncol=2)*.35+2
xc2 <- matrix(rnorm(20000), ncol=2)*.35+4

plot(xc1[,1],xc1[,2],type='p',col='blue',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(xc2[,1],xc2[,2],type='p',col='red',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(matrix(0,nrow=dim(xc2)[1]),xc2[,2],type='p', col='red',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(xc2[,1],matrix(0,nrow=dim(xc2)[1]),type='p', col='red',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(xc1[,1],matrix(0,nrow=dim(xc1)[1]),type='p', col='blue',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(matrix(0,nrow=dim(xc1)[1]), xc1[,2],type='p', col='blue',xlim=c(0,6),ylim=c(0,6))
@

\section{Aula 4}

Estima densidades. Para cada classe, temos duas vari?veis, j? que $\mathbf{x} = [x_1,x_2]^T$, ent?o, para estimar as densidades $P(\mathbf{x}|C_1)$ e $P(\mathbf{x}|C_2)$, nos basearemos na convolu??o dos pares de densidades marginais para cada uma das classes, ou seja, $P(\mathbf{x}|C_1)=P(x_1|C_1)*P(x_2|C_1)$ e $P(\mathbf{x}|C_2)=P(x_1|C_2)*P(x_2|C_2)$
% nas duas marginais $P(x_1)$ e $P(x_2)$.

<<echo=TRUE,fig=TRUE>>=
m11 <- mean(xc1[,1])
m12 <- mean(xc1[,2])
s11 <- sd(xc1[,1])
s12 <- sd(xc1[,2])
m21 <- mean(xc2[,1])
m22 <- mean(xc2[,2])
s21 <- sd(xc2[,1])
s22 <- sd(xc2[,2])
xrange <- seq(0,6,.1)
fnormal1var<-function(x,m,r) ((1/(sqrt(2*pi*r*r)))*exp(-0.5 * ((x-m)/(2*r))^2))
f11 <- fnormal1var(xrange,m11,s11)
f12 <- fnormal1var(xrange,m12,s12)
f21 <- fnormal1var(xrange,m21,s21)
f22 <- fnormal1var(xrange,m21,s21)
par(new=T)
plot(xrange, f11, type='l', col='blue',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(f12, xrange, type='l', col='blue',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(xrange, f21, type='l', col='red',xlim=c(0,6),ylim=c(0,6))
par(new=T)
plot(f22, xrange, type='l', col='red',xlim=c(0,6),ylim=c(0,6))
@

<<echo=TRUE,fig=TRUE>>=
library('plot3D')
np<-length(f11)
seqi <- seq(1,np)
seqj <- seq(1,np)
m1 <- matrix(nrow=np,ncol=np)
m2 <- matrix(nrow=np,ncol=np)
m3 <- matrix(nrow=np,ncol=np)
for(i in seqi){
  for(j in seqj){
    m1[i,j] <- f11[i]*f12[j]
    m2[i,j] <- f21[i]*f22[j]
    m3[i,j] <- 1*(m2[i,j] <= m1[i,j])
  }
 } #ribbon3d, plot3d, persp3d, contour2d
ribbon3D(xrange,xrange,m1,clim=c(0,1.5))
ribbon3D(xrange,xrange,m2,clim=c(0,1.5),add=T)
ribbon3D(xrange,xrange,m3,clim=c(0,1.5),add=T)
scatter3D(xc1[,1],xc1[,2],matrix(0,nrow=dim(xc1)[1]),add=T,col='blue')
scatter3D(xc2[,1],xc2[,2],matrix(0,nrow=dim(xc1)[1]),add=T,col='red')

#   persp(seqi,seqj,m1,col='blue')
#   par(new=T)
#   persp(seqi,seqj,m2,col='red')
@

\section{Aula 5}

Agora, leva-se em conta as correla??es!

<<echo=TRUE,fig=TRUE>>=
rm(list=ls())
library('plot3D')

pdfnvar <- function(x,m,K,n) ((1/(sqrt((2*pi)^n*(det(K)))))*exp(-.5*(t(x-m) %*% (solve(K)) %*% (x-m))))


# 
# s1<-.5
# s2<-.2
N<-100

xc1 <- matrix(rnorm(N), ncol=2)*.35+2
xc2 <- matrix(rnorm(N), ncol=2)*.35+4

m11 <- mean(xc1[,1])
m12 <- mean(xc1[,2])
m1<-matrix(c(m11,m12),ncol=1,nrow=2)
k1<-cov(xc1)
m21 <- mean(xc2[,1])
m22 <- mean(xc2[,2])
m2<-matrix(c(m21,m22),ncol=1,nrow=2)
k2<-cov(xc2)
seqi <- seq(0,6,.1)
seqj <- seq(0,6,.1)
np<-length(seqi)
M1 <- matrix(nrow=np,ncol=np)
M2 <- matrix(nrow=np,ncol=np)
M3 <- matrix(nrow=np,ncol=np)
ci<-0

for(i in seqi){
  ci<-ci+1
  cj<-0
  for(j in seqj){
    cj<-cj+1
    xt<-matrix(c(i,j),nrow=2,ncol=1)
    M1[ci,cj] <- pdfnvar(xt,m1,k1,2)
    M2[ci,cj] <- pdfnvar(xt,m2,k2,2)
    M3[ci,cj] <- 1*(M2[ci,cj] <= M1[ci,cj])
  }
 }

ribbon3D(seqi,seqj,M1,clim=c(0,2))
ribbon3D(seqi,seqj,M2,clim=c(0,2),add=T)
ribbon3D(seqi,seqj,M3,clim=c(0,2),add=T)

@
%citando pelo google scholar
\bibliographystyle{plain}
\bibliography{file}

\end{document}


